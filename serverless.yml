frameworkVersion: '2 || 3'

custom:
  lambda_name: lambda-authorizer-refresh-${opt:stage, 'dev'}

service: ${self:custom.lambda_name}

provider:
  name: aws
  apiName: ${self:custom.lambda_name}-api
  endpointType: REGIONAL
  lambdaHashingVersion: 20201221
  stackName: ${self:custom.lambda_name}
  runtime: nodejs14.x
  role: arn:aws:iam::248567781489:role/lambda-authorizer-role
  deploymentBucket:
    name: craitzus-veliti
  environment:
    STAGE: ${opt:stage, 'dev'}

functions:
  func:
    handler: index.handler
    name: ${self:custom.lambda_name}
    memorySize: 256
    timeout: 30
    description: Refresh token for authorization microservice
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1        
    package:
      individually: true
      patterns:
        - '!.serverless/**'
        - '!test/**'
        - '!*.http'
        - '!template.yml'
        - '!config.*.json'
        - '!package*.json'
    events:
      - http:
          path: refresh
          method: post
          cors: true
          integration: lambda
          request:
            template:
              application/x-www-form-urlencoded: >
                { 
                  "body-json": $input.json("$") 
                }
              application/json: >
                #set( $body = $input.json("$") )

                #define( $loop )
                {
                  #foreach($key in $map.keySet())
                    #set( $k = $util.escapeJavaScript($key) )
                    #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll("\\'", "'") )
                    "$k":
                      "$v"
                      #if( $foreach.hasNext ) , #end
                  #end
                }
                #end

                {
                  "body": $body,
                  "method": "$context.httpMethod",
                  "principalId": "$context.authorizer.principalId",
                  "stage": "$context.stage",

                  "cognitoPoolClaims" : {
                    
                    "sub": "$context.authorizer.claims.sub"
                  },

                  #set( $map = $context.authorizer )
                  "enhancedAuthContext": $loop,

                  #set( $map = $input.params().header )
                  "headers": $loop,

                  #set( $map = $input.params().querystring )
                  "query": $loop,

                  #set( $map = $input.params().path )
                  "path": $loop,

                  #set( $map = $context.identity )
                  "identity": $loop,

                  #set( $map = $stageVariables )
                  "stageVariables": $loop,

                  "requestPath": "$context.resourcePath"
                }
          response:
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: '.*"httpStatus":400.*'
                template: >
                  #set($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))

                  {
                      "statusCode": $errorMessageObj.httpStatus,
                      "type": "$errorMessageObj.type",
                      "cause": "$errorMessageObj.cause"
                  }
              401:
                pattern: '.*"httpStatus":401.*'
                template: >
                  #set($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))

                  {
                      "statusCode": $errorMessageObj.httpStatus,
                      "type": "$errorMessageObj.type",
                      "cause": "$errorMessageObj.cause"
                  }
              500:
                pattern: '.*"httpStatus":500.*'
                template: >
                  #set($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))

                  {
                      "statusCode": $errorMessageObj.httpStatus,
                      "type": "$errorMessageObj.type",
                      "cause": "$errorMessageObj.cause"
                  }                  